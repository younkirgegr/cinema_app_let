// routes/auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const sequelize = require('../config/database');

/**
 * POST /api/auth/login
 * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: email + –ø–∞—Ä–æ–ª—å ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω
 */
router.post('/login', async (req, res) => {
  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  console.log('üîπ req.body:', req.body);

  const { email, password } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏—à–ª–∏ –ª–∏ email –∏ password
  if (!email || !password) {
    return res.status(400).json({ 
      error: '–¢—Ä–µ–±—É—é—Ç—Å—è email –∏ –ø–∞—Ä–æ–ª—å' 
    });
  }

  try {
    // üîç –¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ bcrypt —Ä–∞–±–æ—Ç–∞–µ—Ç
    const testHash = '$2b$10$IfWq9X5yqY4Zq9Z5Zq9Z5uO5q9Z5Zq9Z5uO5q9Z5Zq9Z5uO5q9Z5u';
    const isMatchTest = await bcrypt.compare('password123', testHash);
    console.log('üîπ –¢–µ—Å—Ç bcrypt.compare("password123", —Ö—ç—à):', isMatchTest); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: true

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const [users] = await sequelize.query('SELECT * FROM users WHERE email = ?', {
      replacements: [email]
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω?
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email:', email, '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }

    const user = users[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);

    // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isMatch = await bcrypt.compare(password, user.password_hash);
    console.log('üîπ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –±–∞–∑–æ–π:', isMatch); // true –∏–ª–∏ false

    if (!isMatch) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }

    // ‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { user_id: user.user_id },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   // backend/routes/auth.js
    res.json({
      token,
      user: {
        user_id: user.user_id,
        first_name: user.first_name,
        last_name: user.last_name,
        email: user.email,
        role_id: user.role_id  // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å
      }
    });

  } catch (err) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', err);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' 
    });
  }
});

module.exports = router;