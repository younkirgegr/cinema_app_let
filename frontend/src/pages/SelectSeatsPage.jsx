import { useParams } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { getScreeningDetails, getOccupiedSeats } from '../services/api';

export default function SelectSeatsPage() {
  const { screeningId } = useParams();
  const [hall, setHall] = useState(null);
  const [occupiedSeats, setOccupiedSeats] = useState([]);
  const [selectedSeats, setSelectedSeats] = useState([]);
  const [loading, setLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∞–Ω—Å–µ –∏ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç–∞—Ö
  useEffect(() => {
    const loadHallAndSeats = async () => {
      try {
        const hallData = await getScreeningDetails(screeningId);
        const occupied = await getOccupiedSeats(screeningId);

        console.log('–î–∞–Ω–Ω—ã–µ –æ —Å–µ–∞–Ω—Å–µ:', hallData);
        console.log('–ó–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞:', occupied);

        setHall(hallData);
        setOccupiedSeats(Array.isArray(occupied) ? occupied : []);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      } finally {
        setLoading(false);
      }
    };

    loadHallAndSeats();
  }, [screeningId]);

  const handleSeatClick = (seatId) => {
    if (occupiedSeats.includes(seatId)) return; // –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω—è—Ç–æ–µ

    if (selectedSeats.includes(seatId)) {
      setSelectedSeats(selectedSeats.filter(id => id !== seatId));
    } else {
      setSelectedSeats([...selectedSeats, seatId]);
    }
  };

  // –ü–æ–¥—Å—á—ë—Ç —Å—É–º–º—ã
  const totalPrice = selectedSeats.length * (hall?.base_price || 350);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  const startTime = new Date(hall?.start_time).toLocaleTimeString([], {
    hour: '2-digit',
    minute: '2-digit'
  });
  const date = new Date(hall?.start_time).toLocaleDateString();

  if (loading) {
    return (
      <div style={{ padding: '40px', textAlign: 'center' }}>
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∞–Ω—Å–µ...
      </div>
    );
  }

  if (!hall) {
    return (
      <div style={{ padding: '40px', color: 'red', textAlign: 'center' }}>
        –û—à–∏–±–∫–∞: —Å–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.
      </div>
    );
  }

  return (
    <div style={{
      fontFamily: 'Arial, sans-serif',
      backgroundColor: '#f8f9fa',
      minHeight: '100vh',
      padding: '40px 20px',
      maxWidth: '1000px',
      margin: '0 auto'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <h1 style={{ color: '#e50914', textAlign: 'center', marginBottom: '20px' }}>
        –í—ã–±–æ—Ä –º–µ—Å—Ç
      </h1>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∞–Ω—Å–µ */}
      <div style={{
        backgroundColor: '#ffffff',
        borderRadius: '12px',
        padding: '20px',
        marginBottom: '30px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
        textAlign: 'center'
      }}>
        <h2 style={{ margin: '0 0 10px 0', fontSize: '24px' }}>
          {hall.title}
        </h2>
        <p><strong>–î–∞—Ç–∞:</strong> {date}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> {startTime}</p>
        <p><strong>–ó–∞–ª:</strong> {hall.hall_name}</p>
      </div>

      {/* –°—Ö–µ–º–∞ –∑–∞–ª–∞ —Å —Ä—è–¥–∞–º–∏ */}
      {hall.row_count && hall.seats_per_row ? (
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', alignItems: 'center' }}>
          {Array.from({ length: hall.row_count }, (_, i) => {
            const rowNum = i + 1;
            return (
              <div key={rowNum} style={{ display: 'grid', gridTemplateColumns: 'repeat(10, 1fr)', gap: '8px' }}>
                {Array.from({ length: hall.seats_per_row }, (_, j) => {
                  const seatNum = (rowNum - 1) * hall.seats_per_row + (j + 1);
                  const isOccupied = occupiedSeats.includes(seatNum);
                  const isSelected = selectedSeats.includes(seatNum);
                  return (
                    <button
                      key={seatNum}
                      onClick={() => handleSeatClick(seatNum)}
                      disabled={isOccupied}
                      style={{
                        width: '40px',
                        height: '40px',
                        backgroundColor: isOccupied ? '#ccc' : isSelected ? '#e50914' : '#fff',
                        color: isOccupied ? '#999' : isSelected ? 'white' : '#000',
                        border: '1px solid #ddd',
                        borderRadius: '4px',
                        cursor: isOccupied ? 'not-allowed' : 'pointer'
                      }}
                    >
                      {seatNum}
                    </button>
                  );
                })}
              </div>
            );
          })}
        </div>
      ) : (
        <p style={{ textAlign: 'center', color: '#666' }}>–î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä—è–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</p>
      )}

      {/* –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ —Å—Ö–µ–º–æ–π */}
      <div style={{
        textAlign: 'center',
        fontSize: '14px',
        color: '#666',
        marginBottom: '20px'
      }}>
        <span style={{ marginRight: '15px' }}>üü© ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ</span>
        <span style={{ marginRight: '15px' }}>üî¥ ‚Äî –≤—ã–±—Ä–∞–Ω–æ</span>
        <span>‚ö´ ‚Äî –∑–∞–Ω—è—Ç–æ</span>
      </div>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ */}
      <div style={{
        textAlign: 'center',
        marginBottom: '30px',
        fontSize: '18px',
        fontWeight: 'bold'
      }}>
        <p>–ö –æ–ø–ª–∞—Ç–µ: <span style={{ color: '#e50914' }}>{totalPrice} ‚ÇΩ</span></p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        gap: '15px',
        flexWrap: 'wrap'
      }}>
        <button
          onClick={() => window.location.href = '/'}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontWeight: 'bold',
            minWidth: '120px'
          }}
        >
           –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </button>

        <button
          onClick={() => window.location.href = '/my-tickets'}
          style={{
            padding: '10px 20px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontWeight: 'bold',
            minWidth: '120px'
          }}
        >
           –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        </button>

        <button
          onClick={() => {
            if (selectedSeats.length === 0) {
              alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –º–µ—Å—Ç–æ');
              return;
            }
            alert(`–ë–∏–ª–µ—Ç—ã –Ω–∞ ${selectedSeats.length} –º–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã!`);
            window.location.href = '/my-tickets';
          }}
          disabled={selectedSeats.length === 0}
          style={{
            padding: '10px 20px',
            backgroundColor: selectedSeats.length > 0 ? '#e50914' : '#ccc',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: selectedSeats.length > 0 ? 'pointer' : 'not-allowed',
            fontWeight: 'bold',
            minWidth: '120px'
          }}
        >
           –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã
        </button>
      </div>
    </div>
  );
}